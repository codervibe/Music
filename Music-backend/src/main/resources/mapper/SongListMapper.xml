<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shanzhu.music.mapper.SongListMapper">
    <resultMap id="BaseResultMap" type="com.shanzhu.music.entity.po.SongList">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="title" jdbcType="VARCHAR" property="title"/>
        <result column="pic" jdbcType="VARCHAR" property="pic"/>
        <result column="style" jdbcType="VARCHAR" property="style"/>
    </resultMap>

    <resultMap id="ResultMapWithBLOBs" type="com.shanzhu.music.entity.po.SongList" extends="BaseResultMap">
        <result column="introduction" jdbcType="LONGVARCHAR" property="introduction"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,title,pic,style
    </sql>

    <sql id="Blob_Column_List">
        id
        ,title,pic,style,introduction
    </sql>

    <insert id="insert" parameterType="com.shanzhu.music.entity.po.SongList">
        insert into song_list
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="title != null">
                title,
            </if>
            <if test="pic != null">
                pic,
            </if>
            <if test="introduction != null">
                introduction,
            </if>
            <if test="style != null">
                style,
            </if>
        </trim>
        <trim prefix=" values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id},
            </if>
            <if test="title != null">
                #{title},
            </if>
            <if test="pic != null">
                #{pic},
            </if>
            <if test="introduction != null">
                #{introduction},
            </if>
            <if test="style != null">
                #{style},
            </if>
        </trim>
    </insert>

    <update id="update" parameterType="com.shanzhu.music.entity.po.SongList">
        update song_list
        <set>
            <if test="title != null">
                title = #{title},
            </if>
            <if test="pic != null">
                pic = #{pic},
            </if>
            <if test="introduction != null">
                introduction = #{introduction},
            </if>
            <if test="style != null">
                style = #{style},
            </if>
        </set>
        where id = #{id}
    </update>

    <delete id="delete" parameterType="java.lang.Integer">
        delete
        from song_list
        where id = #{id}
    </delete>

    <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
        select
        <include refid="Blob_Column_List"/>
        from song_list
        where id=#{id}
    </select>

    <select id="allSongList" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Blob_Column_List"/>
        from song_list
    </select>

    <select id="songListOfTitle" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song_list
        where title = #{title}
    </select>

    <select id="likeTitle" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song_list
        where title like #{title}
    </select>

    <select id="likeStyle" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
        select
        <include refid="Blob_Column_List"/>
        from song_list
        where style like #{style}
    </select>
    <select id="queryRecommendedSongListById" resultType="com.shanzhu.music.entity.po.SongList">
        SELECT sl.*
        FROM song_list sl
                 JOIN list_song ls ON sl.id = ls.song_list_id
                 JOIN collect c ON ls.song_id = c.song_id
        WHERE c.user_id = #{id}
        GROUP BY sl.id
        ORDER BY COUNT(c.id) DESC LIMIT 5;
    </select>
    <!-- 查询相似用户ID -->
    <select id="findSimilarUsers" resultType="java.lang.Integer" parameterType="java.lang.Integer">
        SELECT r2.consumer_id AS userBid
        FROM ranks r1
        JOIN ranks r2 ON r1.song_list_id = r2.song_list_id
        WHERE r1.consumer_id = #{id}
        AND r1.consumer_id &lt; r2.consumer_id GROUP BY r1.consumer_id, r2.consumer_id
        HAVING SUM(r1.score * r2.score) / (SQRT(SUM(r1.score * r1.score)) * SQRT(SUM(r2.score * r2.score))) > 0.9
    </select>


</mapper>
















